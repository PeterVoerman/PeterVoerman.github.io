{"version":3,"sources":["Components/datePlot.js","Components/nameButton.js","Components/nameList.js","Components/wordCloud.js","Components/namePlot.js","Components/emojiTable.js","Components/hourPlot.js","Components/analysisScreen.js","Components/uploadScreen.js","App.js","reportWebVitals.js","index.js"],"names":["DatePlot","props","messageDates","xData","Object","keys","yData","values","data","x","y","type","mode","marker","color","layout","plot_bgcolor","paper_bgcolor","title","text","font","xaxis","titlefont","nticks","yaxis","useResizeHandler","style","width","height","NameButton","className","onClick","name","NameList","nameList","rows","i","length","push","currentName","messageCounter","WordCloud","wordCloud","emojiJSON","en","nl","forEach","word","includes","emojiStringToArray","char","hasOwnProperty","key","value","count","sortJSON","slice","tags","minSize","maxSize","NamePlot","messageNames","labels","textinfo","hoverinfo","legend","EmojiTable","HourPlot","hours","totalMessages","map","element","margin","t","b","emojiList","require","isDate","date","Date","isNaN","arr","sort","a","str","splitString","split","AnalysisScreen","useState","setNameList","setCurrentName","namesJSON","setNamesJSON","logs","emoji","apple","message","splitMessageSpace","splitMessageColon","actualMessage","toLowerCase","hour","splitMessageComma","splitMessageDashColon","names","unshift","Container","fluid","setLogs","Row","Col","xs","handleClickName","UploadScreen","for","id","onChange","f","e","preventDefault","reader","FileReader","onload","input_text","target","result","readAsText","files","readFile","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3eef6e85.chunk.js","sourcesContent":["import '../App.css';\nimport React from 'react';\nimport Plot from 'react-plotly.js'\n\n// Plot messages per day\nfunction DatePlot(props) {\n\n  let messageDates = props.messageDates\n\n  let xData = Object.keys(messageDates)\n  let yData = Object.values(messageDates)\n  \n  return(\n    <div>\n      <Plot\n        data={[\n          {\n            x: xData,\n            y: yData,\n            type: 'scatter',\n            mode: 'lines',\n            marker: {color: 'red'},\n          },\n        ]}\n\n        layout={{\n          plot_bgcolor:\"#131c21\", paper_bgcolor:\"#131c21\", \n          title:{ text:'Messages per day', font:{color:'#00bfa5'}},  \n          xaxis:{title:{text:\"Date\"}, titlefont:{color:'#00bfa5'}, color:'#00bfa5', nticks:15},\n          yaxis:{title:{text:\"Amount of messages\"}, titlefont:{color:'#00bfa5'}, color:'#00bfa5'},\n        }}\n\n        useResizeHandler={true}\n        style={{width: \"95%\", height: \"95%\"}}\n      />\n    </div>\n  )\n}\n\nexport default DatePlot","import '../App.css'\nimport React from 'react'\n\n// Generate a button to be used in the name list\nfunction NameButton(props) {\n\n  return (\n      <div className='namebutton col' onClick={() => props.onClick(props.name)}>{props.name}</div>\n    )\n}\n\nexport default NameButton","import '../App.css'\nimport React from 'react'\n\nimport NameButton from './nameButton'\n\n// Generate a list of names in the chat\nfunction NameList(props) {\n\n  let nameList = props.nameList\n\n  var rows = []\n  for (var i = 0; i < nameList.length; i+=2) {\n\n    // Add two names to every row\n    rows.push(<div className='row'>\n                <NameButton onClick={name => props.onClick(name)} key={i} name={nameList[i]}/>\n                <NameButton onClick={name => props.onClick(name)} key={i+1} name={nameList[i+1]}/>\n              </div>)\n  }\n\n  return (\n    <div className='namelist'>\n      Selected: {props.currentName}\n      <br/>\n      Total messages: {props.messageCounter}\n      <div className='container'>{rows}</div>\n    </div>\n  )\n}\n\nexport default NameList","import '../App.css'\nimport React from 'react'\nimport { TagCloud } from 'react-tagcloud'\n\n// Generate a word cloud of most used words\nfunction WordCloud(props) {\n\n  let wordCloud = props.wordCloud\n  let emojiJSON = props.emojiJSON\n\n  let en = props.en\n  let nl = props.nl\n\n  // Filter out stop words and emojis\n  Object.keys(wordCloud).forEach(word => {\n    if (en.includes(word) || nl.includes(word)) {\n      wordCloud[word] = 0\n    }\n\n    let splitWord = props.emojiStringToArray(word)\n    splitWord.forEach((char) => {\n      if (emojiJSON.hasOwnProperty(char)) {\n        wordCloud[word] = 0\n      }\n    })\n  })\n\n  // Format and sort the data\n  let data = []\n  Object.keys(wordCloud).forEach((key) => {\n    data.push({value: key, count: wordCloud[key]})\n  })\n\n  data = props.sortJSON(data, \"count\").slice(0, 25)\n\n  return (\n    <div className='wordcloud'>\n    <h2>Most used words</h2>\n      <TagCloud\n        tags={data}\n        minSize={20}\n        maxSize={50}\n      />\n    </div>\n  )\n}\n\nexport default WordCloud","import '../App.css'\nimport React from 'react'\nimport Plot from 'react-plotly.js'\n\n// Plot a pie chart of amount of messages per person\nfunction NamePlot(props) {\n\n  let messageNames = props.messageNames\n\n  let values = Object.values(messageNames)\n  let labels = Object.keys(messageNames)\n\n  return(\n    <div>\n      <Plot\n        data={[\n          {\n            values: values,\n            labels: labels,\n            type: 'pie',\n            textinfo: 'none',\n            hoverinfo: 'label+percent'\n          }\n        ]}\n\n        layout={{\n          plot_bgcolor:\"#131c21\",\n          paper_bgcolor:\"#131c21\", \n          title:{text:'Messages per person', font:{color:'#00bfa5'}}, \n          legend:{font:{color:'#00bfa5'}}\n        }}\n\n        useResizeHandler={true}\n        style={{width: \"95%\", height: \"95%\"}}\n      />\n    </div>\n  ) \n}\n\nexport default NamePlot","import '../App.css';\nimport React from 'react';\n\n// Generate a table that shows the most used emojis\nfunction EmojiTable(props) {\n\n  let emojiJSON = props.emojiJSON\n\n  // Format and sort the data\n  let data = []\n  Object.keys(emojiJSON).forEach((key) => {\n    data.push({value: key, count: emojiJSON[key]})\n  })\n  data = props.sortJSON(data, \"count\").slice(0, 30)\n\n  var rows = [];\n  for (var i = 0; i < 14; i+=2) {\n\n    // Add a row to the table, formatted like: \"[emoji_1]: [count_1]    [emoji_2]: [count_2]\"\n    rows.push(<tr key={i}><td>{`${data[i].value}:${data[i].count}`}</td> <td>{`${data[i+1].value}:${data[i+1].count}`}</td></tr>);\n  }\n\n  return (\n    <div>\n      <h2>Most used emojis</h2>\n      <center>\n        <table>\n          {rows}\n        </table>\n      </center>\n    </div>\n  )\n}\n\nexport default EmojiTable","import '../App.css'\nimport React from 'react'\nimport Plot from 'react-plotly.js'\n\n// Plot a bar plot of the times messages were sent on\nfunction HourPlot(props) {\n\n  let hours = props.hours\n  let totalMessages = props.totalMessages\n  let x = Object.keys(hours)\n  let y = Object.values(hours)\n\n  // Calculate percentage of message every hour\n  y = y.map(element => 100 * element / totalMessages)\n\n  return (\n    <div>\n      <Plot\n        data={[\n          {\n            x: x,\n            y: y,\n            type: 'bar',\n            textinfo: 'none',\n          }\n        ]}\n\n        layout={{\n          plot_bgcolor:\"#131c21\", paper_bgcolor:\"#131c21\", \n          title:{ text:'Messages per hour', font:{color:'#00bfa5'}},  \n          xaxis:{title:{text:\"Hour\"}, titlefont:{color:'#00bfa5'}, color:'#00bfa5'},\n          yaxis:{title:{text:\"Percentage of messages (%)\"}, titlefont:{color:'#00bfa5'}, color:'#00bfa5'},\n          margin:{t:25, b:125},\n        }}\n      />\n    </div>\n  )\n}\n\nexport default HourPlot","import '../App.css';\nimport { Container, Row, Col } from 'react-bootstrap'\nimport React, { useState } from 'react'\nimport { en, nl } from 'stopwords-json'\n\nimport DatePlot from './datePlot'\nimport NameList from './nameList'\nimport WordCloud from './wordCloud'\nimport NamePlot from './namePlot'\nimport EmojiTable from './emojiTable'\nimport HourPlot from './hourPlot'\n\nlet emojiList = require('emoji.json')\n\n// Generate the analysis screen\nfunction AnalysisScreen(props) {\n  const [nameList, setNameList] = useState('')\n  const [currentName, setCurrentName] = useState('Everyone')\n  const [namesJSON, setNamesJSON] = useState('')\n\n  let logs = props.logs\n\n  // Initialize the variables that will contain the data\n  let messageDates = {}\n  let messageNames = {}\n  let wordCloud = {}\n  let hours = {}\n  let messageCounter = 0\n\n  for (let i = 0; i < 24; i++) {\n    if (i < 10) {\n      hours[`0${i}`] = 0\n    }\n    else {\n      hours[`${i}`] = 0\n    }\n  }\n\n  let emojiJSON = {}\n  emojiList.forEach((emoji) => {\n    emojiJSON[emoji.char] = 0\n  })\n\n  // Add standard whatsapp messages to stopwords\n  en.push('<media')\n  en.push('omitted>')\n  en.push('message')\n  en.push('deleted')\n\n  // Handle a click on the header to go back home\n  const handleClickHome = () => {\n    props.setLogs('')\n    setNameList('')\n    setCurrentName('Everyone')\n    setNamesJSON('')\n  }\n\n  // Add functionality to the name buttons\n  const handleClickName = name => {\n    setCurrentName(name)\n  }\n\n\n  // Check which OS the file originated from\n  let apple = false\n  if (logs[0] === '[') {\n    apple = true\n  }\n\n  // Do the analysis for apple devices\n  if (apple === true) {\n\n    // Each message starts with [ and ends with a newline\n    let splitLogs = logs.split('\\n[')\n\n    // Loop through the messages\n    splitLogs.slice(1).forEach((message) => {\n      let splitMessageSpace = message.split(' ')\n      let splitMessageColon = message.split(':')\n      \n      // Skip messages like \"x left the chat\"\n      if (splitMessageColon.length === 4) {\n          \n        // Find the sender of the message and continue if that sender is selected\n        let name = splitMessageColon[2].split(']')[1].slice(1)\n        if (name === currentName || currentName === 'Everyone') {\n          messageCounter++\n\n          // Save the date each message was sent on\n          let date = splitMessageSpace[0]\n          if (messageDates.hasOwnProperty(date)) {\n            messageDates[date] += 1\n          }\n          else {\n            messageDates[date] = 1\n          }\n          \n          // Save the sender of each message\n          if (messageNames.hasOwnProperty(name)) {\n            messageNames[name] += 1\n          }\n          else {\n            messageNames[name] = 1\n          }\n\n          // Save the words in each message\n          let actualMessage = splitMessageColon[3]\n          let words = actualMessage.split(' ').slice(1)\n\n          words.forEach((word) => {\n            word = word.toLowerCase()\n            if (word.slice(word.length - 1) === '\\r') {\n              word = word.slice(0, word.length - 1)\n            }\n            if (word.length > 1) {\n              if (wordCloud.hasOwnProperty(word)) {\n                wordCloud[word] += 1\n              }\n              else {\n                wordCloud[word] = 1\n              }  \n            }        \n          })\n\n          // Save the hour each message was sent in\n          let hour = splitMessageColon[0].slice(splitMessageColon[0].length-2, splitMessageColon[0].length)\n          hours[hour] += 1\n\n          // Save the amount of emojis sent\n          let splitMessageEmoji = emojiStringToArray(actualMessage)\n          splitMessageEmoji.forEach((emoji) => {\n            if (emojiJSON.hasOwnProperty(emoji)) {\n              emojiJSON[emoji] += 1\n            }\n          })\n        }\n      }\n    })\n  }\n\n  // Do the analysis for android devices\n  else {\n    let splitLogs = logs.split('\\n')\n\n    splitLogs.slice(0).forEach((message) => {\n      let splitMessageComma = message.split(',')\n\n      // Newline in file is a new message if it starts with a date\n      if (isDate(splitMessageComma[0])) {\n        let splitMessageDashColon = splitMessageComma[1].split(/[:,-]+/)\n\n        // Skip message like \"x left the chat\"\n        if (splitMessageDashColon.length === 4) {\n\n          // Find the sender of the message and continue if that sender is selected\n          let name = splitMessageDashColon[2].slice(1)\n          if (name === currentName || currentName === 'Everyone') {\n            messageCounter++\n\n            // Save the date each message was sent on\n            let date = splitMessageComma[0]\n            if (messageDates.hasOwnProperty(date)) {\n              messageDates[date] += 1\n            }\n            else {\n              messageDates[date] = 1\n            }\n\n            // Save the sender of each message\n            if (messageNames.hasOwnProperty(name)) {\n              messageNames[name] += 1\n            }\n            else {\n              messageNames[name] = 1\n            }\n\n            // Save the words in each message\n            let words = splitMessageDashColon[3]\n            let splitWords = words.split(' ')\n\n            splitWords.forEach((word) => {\n              word = word.toLowerCase()\n              if (word.slice(word.length - 1) === '\\n') {\n                word = word.slice(0, word.length - 1)\n              }\n              if (word.length > 1) {\n                if (wordCloud.hasOwnProperty(word)) {\n                  wordCloud[word] += 1\n                }\n                else {\n                 wordCloud[word] = 1\n                }\n              }\n            })\n\n            // Save the hour each message was sent in\n            let hour = splitMessageDashColon[0].slice(1)\n            hours[hour] += 1\n\n            // Save the emojis in each message\n            let splitMessageEmoji = emojiStringToArray(splitMessageDashColon[3])\n            splitMessageEmoji.forEach((emoji) => {\n              if (emojiJSON.hasOwnProperty(emoji)) {\n                emojiJSON[emoji] += 1\n              }\n            })\n          } \n        }  \n      }\n    })\n  }\n\n  // Save all participants in the chat\n  if (nameList === '' && Object.keys(messageNames).length > 0) {\n    let names = Object.keys(messageNames)\n    names.unshift(\"Everyone\")\n    setNameList(names)\n    setNamesJSON(messageNames)\n  }\n\n  return (\n    <Container fluid className='App'>\n      <h1 className='header' onClick={() => handleClickHome()}> WhatsApp Analyzer </h1>\n      <Row>\n        <Col><DatePlot messageDates={messageDates}/></Col>\n        <Col xs={2}><NameList nameList={nameList} currentName={currentName} messageCounter={messageCounter} onClick={name => handleClickName(name)}/></Col>\n        <Col><NamePlot messageNames={namesJSON}/></Col>\n      </Row>\n      <Row>\n        <Col><WordCloud wordCloud={wordCloud} emojiJSON={emojiJSON} en={en} nl={nl} emojiStringToArray={emojiStringToArray} sortJSON={sortJSON}/> </Col>\n        <Col><HourPlot hours={hours} totalMessages={messageCounter}/></Col>\n        <Col className='emojitable'><EmojiTable emojiJSON={emojiJSON} sortJSON={sortJSON}/></Col>\n      </Row>\n    </Container>\n  )\n}\n\n// Checks if a given string is a date\n// Thanks to https://stackoverflow.com/a/25047903 :)\nconst isDate = function(date) {\n\n    return (new Date(date) !== \"Invalid Date\") && !isNaN(new Date(date))\n  }\n  \n// Sorts a JSON, outputs a sorted array\n// Thanks to https://stackoverflow.com/a/14949429 :)\nconst sortJSON = (arr, key) => {\n\n  return arr.sort(function(a, b) {\n      var x = a[key]; var y = b[key]\n      return ((x > y) ? -1 : ((x < y) ? 1 : 0))\n  })\n}\n\n// Splits a string while taking emojis into account\n// Thanks to https://stackoverflow.com/a/24531752 :)\nconst emojiStringToArray = (str) => {\n\n  let splitString = str.split(/([\\uD800-\\uDBFF][\\uDC00-\\uDFFF])/)\n  let arr = []\n\n  for (let i=0; i<splitString.length; i++) {\n    let char = splitString[i]\n    if (char !== \"\") {\n      arr.push(char)\n    }\n  }\n\n  return arr\n}\n\nexport default AnalysisScreen","import '../App.css'\nimport { Container, Row, Col } from 'react-bootstrap'\nimport React from 'react'\n\n// Generate the upload screen\nfunction UploadScreen(props) {\n\n  // Read the input file\n  // Thanks to https://stackoverflow.com/questions/55830414/how-to-read-text-file-in-react :)\n  const readFile = (e) => {\n    e.preventDefault()\n    const reader = new FileReader()\n    reader.onload = (e) => { \n      const input_text = (e.target.result)\n      props.setLogs(input_text)\n    }\n    reader.readAsText(e.target.files[0])\n  }\n  \n  return (\n  <Container className=\"App\">\n    <h1>WhatsApp Analyzer</h1>\n      <Row>\n        <Col className=\"explanation\">\n          <h4>How to analyze your WhatsApp chat logs:</h4>\n          <ul>\n            <li>Open a WhatsApp chat and tap the three dots in the top left of your screen</li>\n            <li>Select more -{'>'} Export chat</li>\n            <li>Select without media</li>\n            <li>Send the chat logs to yourself via WhatsApp/email/bluetooth</li>\n            <li>Upload the chat logs</li>\n          </ul>\n        </Col>\n        <Col xs={2}/>\n        <Col className='upload'>\n          Upload files by dragging them on the box below or by clicking on it.\n          <label for='inputfile' className='inputlabel'>\n            <input type=\"file\"\n                  id=\"inputfile\" className='input' onChange={(f)=>readFile(f)}/>\n          </label>\n        </Col> \n      </Row>\n    </Container>\n  )\n}\n\nexport default UploadScreen","import React, { useState } from 'react';\nimport './App.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\nimport AnalysisScreen from './Components/analysisScreen'\nimport UploadScreen from './Components/uploadScreen'\n\n// Generate the application\nfunction App() {\n\n  const [logs, setLogs] = useState('')\n\n  // Show this screen before analyzing\n  if (logs === '') {\n    return (\n      <UploadScreen setLogs={setLogs}/>\n    )\n  }\n  \n  // Show this screen after analyzing\n  else {\n    return (\n      <AnalysisScreen \n        logs={logs}\n        setLogs={setLogs}\n      />\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}